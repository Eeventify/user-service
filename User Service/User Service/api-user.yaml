openapi: 3.0.1
info:
  title: User API
  description: An API used for user authentification
  version: v1
paths:
  /Login:
    get:
      tags:
        - Login
      summary: Attempt Login
      description: Attempt a login with given user authentification
      parameters:
        - name: email
          in: query
          description: The email for attempted login
          schema:
            type: string
        - name: password
          in: query
          description: The password for attempted login
          schema:
            type: string
      responses:
        '200':
          description: The login details are correct and an JWT identification token will be returned
          content:
            text/plain:
              schema:
                type: string
            application/json:
              schema:
                type: string
            text/json:
              schema:
                type: string
        '400':
          description: The given input was invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Invalid login-detail were given
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Login/Register:
    post:
      tags:
        - Login
      summary: Register User
      description: Register a new user account with given user information
      requestBody:
        description: The user-information in the POST body for which to create an account
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
          text/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
          application/*+json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: The account was created. An authentification token is returned in the body
        '202':
          description: An input is invalid or of the wrong format. What specific input will be given in the body
  '/User/Details/{userID}':
    get:
      tags:
        - User
      summary: Get User Details
      description: Get user details based on a given user ID
      parameters:
        - name: userID
          in: path
          description: The ID of the user
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User information is returned in Json format
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User with given ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /User/Details:
    get:
      tags:
        - User
      summary: Get own User Details
      description: Get user details based on the provided login token. Supplies information about the user that makes the request
      responses:
        '200':
          description: User information is returned in Json format
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The user profile could not be found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: No authentication header was provided or the given token was invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/User/AttendEvent/{eventID}':
    post:
      tags:
        - User
      summary: Attend Event
      description: Adds an event to the user's attending list. The user should be provided using the users authorization token in the authorization header
      parameters:
        - name: eventID
          in: path
          description: ID of the event the user is attending
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The event has been added or was already presetn. More information will be given in the reponse
        '400':
          description: An error occured with the input. More information will be given in the reponse
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: No token or an invalid authorization token was provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/User/UnattendEvent/{eventID}':
    delete:
      tags:
        - User
      summary: Unttend Event
      description: Removes an event from the user's attending list. The user should be provided using the users authorization token in the authorization header
      parameters:
        - name: eventID
          in: path
          description: ID of the event the user is attending
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The event has been removed or was not attended. More information will be provided in the response
        '400':
          description: An error occured with the input. More information will be given in the reponse
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: No token or an invalid authorization token was provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/User/AddInterest/{interestID}':
    post:
      tags:
        - User
      summary: Add Interest
      description: Adds an interest to the user's interest list. The user should be provided using the users authorization token in the authorization header
      parameters:
        - name: interestID
          in: path
          description: ID of the interest the user is adding
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The interest has been added or was already present. More information will be provided in the response
        '400':
          description: An error occured with the input. More information will be given in the reponse
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: No token or an invalid authorization token was provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  '/User/RemoveInterest/{interestID}':
    delete:
      tags:
        - User
      summary: Remove Interest
      description: Removes an interest from the user's interest list. The user should be provided using the users authorization token in the authorization header
      parameters:
        - name: interestID
          in: path
          description: ID of the interest the user is removing
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: The interest has been removed or was never present. More information will be provided in the response
        '400':
          description: An error occured with the input. More information will be given in the reponse
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: No token or an invalid authorization token was provided
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /User/UpdateUsername:
    put:
      tags:
        - User
      parameters:
        - name: username
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /User/UpdatePassword:
    put:
      tags:
        - User
      parameters:
        - name: password
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /User/UpdateEmail:
    put:
      tags:
        - User
      parameters:
        - name: email
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /User/UpdateImage:
    put:
      tags:
        - User
      summary: ''
      parameters:
        - name: picture
          in: query
          description: ''
          schema:
            type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Unauthorized
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    RegisterUser:
      type: object
      properties:
        username:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        password:
          type: string
          nullable: true
        profileImg:
          type: string
          nullable: true
      additionalProperties: false
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        registrationDate:
          type: string
          format: date-time
        events:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
        interests:
          type: array
          items:
            type: integer
            format: int32
          nullable: true
      additionalProperties: false