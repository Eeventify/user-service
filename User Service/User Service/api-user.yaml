openapi: 3.0.1
info:
  title: User API
  description: An API used for user authentification
  version: v1
paths:
  /Login:
    get:
      tags:
        - Login
      summary: Attempt Login
      description: Attempt a login with given user authentification
      parameters:
        - name: email
          in: query
          description: The email for attempted login
          schema:
            type: string
        - name: password
          in: query
          description: The password for attempted login
          schema:
            type: string
      responses:
        '200':
          description: The login details are correct and an identification token will be returned
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: The given input was invalid
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '401':
          description: Invalid login-detail were given
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /Login/Register:
    get:
      tags:
        - Login
      summary: Register User
      description: Register a new user account with given user information
      parameters:
        - name: email
          in: query
          description: The email for the created account
          schema:
            type: string
        - name: username
          in: query
          description: The username for the created account
          schema:
            type: string
        - name: password
          in: query
          description: The password for the created account
          schema:
            type: string
      responses:
        '200':
          description: The account was created. An authentification token is returned in the body
        '202':
          description: An input is invalid or of the wrong format. What specific input will be given in the body
  /Token/Request:
    get:
      tags:
        - Token
      summary: Request Authentification Token
      description: "Request an authentification token for a user.\r\nIf one already exists, this one will be returned. Otherwise a new one will be generated."
      parameters:
        - name: id
          in: query
          description: ID for user that the authentification token is being requested for
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: ''
        '404':
          description: ''
  /User/Details:
    get:
      tags:
        - User
      summary: Get User Details
      description: Get user details based on a given user ID
      parameters:
        - name: Id
          in: query
          description: The ID of the user
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: User information is returned in Json format
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/User'
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            text/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User with given ID was not found
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
            text/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
components:
  schemas:
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: { }
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
          nullable: true
        email:
          type: string
          nullable: true
        registrationDate:
          type: string
          format: date-time
      additionalProperties: false